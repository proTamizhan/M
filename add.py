import base64

exec(base64.b64decode(b'ZnJvbSB0ZWxldGhvbi5zeW5jIGltcG9ydCBUZWxlZ3JhbUNsaWVudApmcm9tIHRlbGV0aG9uLmVycm9ycy5ycGNlcnJvcmxpc3QgaW1wb3J0IFBob25lTnVtYmVyQmFubmVkRXJyb3IKaW1wb3J0IHBpY2tsZSwgb3MKZnJvbSBjb2xvcmFtYSBpbXBvcnQgaW5pdCwgRm9yZQpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwCgppbml0KCkKCm4gPSBGb3JlLlJFU0VUCmxnID0gRm9yZS5MSUdIVEdSRUVOX0VYCnIgPSBGb3JlLlJFRAp3ID0gRm9yZS5XSElURQpjeSA9IEZvcmUuQ1lBTgp5ZSA9IEZvcmUuWUVMTE9XCmNvbG9ycyA9IFtsZywgciwgdywgY3ksIHllXQoKdHJ5OgogICAgaW1wb3J0IHJlcXVlc3RzCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIHByaW50KGYne2xnfVtpXSBJbnN0YWxsaW5nIG1vZHVsZSAtIHJlcXVlc3RzLi4ue259JykKICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgcmVxdWVzdHMnKQoKZGVmIGJhbm5lcigpOgogICAgaW1wb3J0IHJhbmRvbQogICAgIyBmYW5jeSBsb2dvCiAgICBiID0gWyAgCiAgICAnICAgIF9fX18gICAgICAgICAgICAgX18gICAgICAgICAgICBfXyAgICAnLCAgICAgICAgCiAgICcgICAvIF9fIFxfX19fX19fX18gIC8gL19fX19fX19fX19fLyAvX19fX18gIF9fX19fJywKICAnICAvIC9fLyAvIF9fXy8gX18gXC8gX18vIF9fXy8gX19fLyBfXy8gX18gXC8gX19fLycsCiAnIC8gX19fXy8gLyAgLyAvXy8gLyAvXy8gLyAgLyAvX18vIC9fLyAvXy8gLyAvICAgJywKJy9fLyAgIC9fLyAgIFxfX19fL1xfXy9fLyAgIFxfX18vXF9fL1xfX19fL18vICAgJyAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICBdCiAgICBmb3IgY2hhciBpbiBiOgogICAgICAgIHByaW50KGYne3JhbmRvbS5jaG9pY2UoY29sb3JzKX17Y2hhcn17bn0nKQogICAgI3ByaW50KCc9PT09PT09PT09PT09U09OIE9GIEdFTklTWVM9PT09PT09PT09PT09PScpCiAgICBwcmludChmJyAgVmVyc2lvbjogMy4yIHwgQXV0aG9yOiB6aWxsYSB8IEZiLmNvbS9haGFkMzYwe259XG4nKQoKZGVmIGNscigpOgogICAgaWYgb3MubmFtZSA9PSAnbnQnOgogICAgICAgIG9zLnN5c3RlbSgnY2xzJykKICAgIGVsc2U6CiAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCgp3aGlsZSBUcnVlOgogICAgY2xyKCkKICAgIGJhbm5lcigpCiAgICBwcmludChsZysnWzFdIEFkZCBuZXcgYWNjb3VudHMnK24pCiAgICBwcmludChsZysnWzJdIEZpbHRlciBhbGwgYmFubmVkIGFjY291bnRzJytuKQogICAgcHJpbnQobGcrJ1szXSBEZWxldGUgc3BlY2lmaWMgYWNjb3VudHMnK24pCiAgICBwcmludChsZysnWzRdIFVwZGF0ZSB5b3VyIFppbGxhJytuKQogICAgcHJpbnQobGcrJ1s1XSBRdWl0JytuKQogICAgYSA9IGludChpbnB1dCgnXG5FbnRlciB5b3VyIGNob2ljZTogJykpCiAgICBpZiBhID09IDE6CiAgICAgICAgbmV3X2FjY3MgPSBbXQogICAgICAgIHdpdGggb3BlbigndmFycy50eHQnLCAnYWInKSBhcyBnOgogICAgICAgICAgICBudW1iZXJfdG9fYWRkID0gaW50KGlucHV0KGYnXG57bGd9IFt+XSBFbnRlciBudW1iZXIgb2YgYWNjb3VudHMgdG8gYWRkOiB7cn0nKSkKICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobnVtYmVyX3RvX2FkZCk6CiAgICAgICAgICAgICAgICBwaG9uZV9udW1iZXIgPSBzdHIoaW5wdXQoZidcbntsZ30gW35dIEVudGVyIFBob25lIE51bWJlcjoge3J9JykpCiAgICAgICAgICAgICAgICBwYXJzZWRfbnVtYmVyID0gJycuam9pbihwaG9uZV9udW1iZXIuc3BsaXQoKSkKICAgICAgICAgICAgICAgIHBpY2tsZS5kdW1wKFtwYXJzZWRfbnVtYmVyXSwgZykKICAgICAgICAgICAgICAgIG5ld19hY2NzLmFwcGVuZChwYXJzZWRfbnVtYmVyKQogICAgICAgICAgICBwcmludChmJ1xue2xnfSBbaV0gU2F2ZWQgYWxsIGFjY291bnRzIGluIHZhcnMudHh0JykKICAgICAgICAgICAgY2xyKCkKICAgICAgICAgICAgcHJpbnQoZidcbntsZ30gWypdIExvZ2dpbmcgaW4gZnJvbSBuZXcgYWNjb3VudHNcbicpCiAgICAgICAgICAgIGZvciBudW1iZXIgaW4gbmV3X2FjY3M6CiAgICAgICAgICAgICAgICBjID0gVGVsZWdyYW1DbGllbnQoZidzZXNzaW9ucy97bnVtYmVyfScsIDM5MTAzODkgLCAnODZmODYxMzUyZjBhYjc2YTI1MTg2NjA1OWE2YWRiZDYnKQogICAgICAgICAgICAgICAgYy5zdGFydChudW1iZXIpCiAgICAgICAgICAgICAgICBwcmludChmJ3tsZ31bK10gTG9naW4gc3VjY2Vzc2Z1bCcpCiAgICAgICAgICAgICAgICBjLmRpc2Nvbm5lY3QoKQogICAgICAgICAgICBpbnB1dChmJ1xuIFByZXNzIGVudGVyIHRvIGdvdG8gbWFpbiBtZW51Li4uJykKCiAgICAgICAgZy5jbG9zZSgpCiAgICBlbGlmIGEgPT0gMjoKICAgICAgICBhY2NvdW50cyA9IFtdCiAgICAgICAgYmFubmVkX2FjY3MgPSBbXQogICAgICAgIGggPSBvcGVuKCd2YXJzLnR4dCcsICdyYicpCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgYWNjb3VudHMuYXBwZW5kKHBpY2tsZS5sb2FkKGgpKQogICAgICAgICAgICBleGNlcHQgRU9GRXJyb3I6CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGguY2xvc2UoKQogICAgICAgIGlmIGxlbihhY2NvdW50cykgPT0gMDoKICAgICAgICAgICAgcHJpbnQocisnWyFdIFRoZXJlIGFyZSBubyBhY2NvdW50cyEgUGxlYXNlIGFkZCBzb21lIGFuZCByZXRyeScpCiAgICAgICAgICAgIHNsZWVwKDMpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZm9yIGFjY291bnQgaW4gYWNjb3VudHM6CiAgICAgICAgICAgICAgICBwaG9uZSA9IHN0cihhY2NvdW50WzBdKQogICAgICAgICAgICAgICAgY2xpZW50ID0gVGVsZWdyYW1DbGllbnQoZidzZXNzaW9ucy97cGhvbmV9JywgMzkxMDM4OSAsICc4NmY4NjEzNTJmMGFiNzZhMjUxODY2MDU5YTZhZGJkNicpCiAgICAgICAgICAgICAgICBjbGllbnQuY29ubmVjdCgpCiAgICAgICAgICAgICAgICBpZiBub3QgY2xpZW50LmlzX3VzZXJfYXV0aG9yaXplZCgpOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50LnNlbmRfY29kZV9yZXF1ZXN0KHBob25lKQogICAgICAgICAgICAgICAgICAgICAgICAjY2xpZW50LnNpZ25faW4ocGhvbmUsIGlucHV0KCdbK10gRW50ZXIgdGhlIGNvZGU6ICcpKQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ3tsZ31bK10ge3Bob25lfSBpcyBub3QgYmFubmVke259JykKICAgICAgICAgICAgICAgICAgICBleGNlcHQgUGhvbmVOdW1iZXJCYW5uZWRFcnJvcjoKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQocitzdHIocGhvbmUpICsgJyBpcyBiYW5uZWQhJytuKQogICAgICAgICAgICAgICAgICAgICAgICBiYW5uZWRfYWNjcy5hcHBlbmQoYWNjb3VudCkKICAgICAgICAgICAgaWYgbGVuKGJhbm5lZF9hY2NzKSA9PSAwOgogICAgICAgICAgICAgICAgcHJpbnQobGcrJ0NvbmdyYXRzISBObyBiYW5uZWQgYWNjb3VudHMnKQogICAgICAgICAgICAgICAgaW5wdXQoJ1xuUHJlc3MgZW50ZXIgdG8gZ290byBtYWluIG1lbnUuLi4nKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgZm9yIG0gaW4gYmFubmVkX2FjY3M6CiAgICAgICAgICAgICAgICAgICAgYWNjb3VudHMucmVtb3ZlKG0pCiAgICAgICAgICAgICAgICB3aXRoIG9wZW4oJ3ZhcnMudHh0JywgJ3diJykgYXMgazoKICAgICAgICAgICAgICAgICAgICBmb3IgYSBpbiBhY2NvdW50czoKICAgICAgICAgICAgICAgICAgICAgICAgUGhvbmUgPSBhWzBdCiAgICAgICAgICAgICAgICAgICAgICAgIHBpY2tsZS5kdW1wKFtQaG9uZV0sIGspCiAgICAgICAgICAgICAgICBrLmNsb3NlKCkKICAgICAgICAgICAgICAgIHByaW50KGxnKydbaV0gQWxsIGJhbm5lZCBhY2NvdW50cyByZW1vdmVkJytuKQogICAgICAgICAgICAgICAgaW5wdXQoJ1xuUHJlc3MgZW50ZXIgdG8gZ290byBtYWluIG1lbnUuLi4nKQoKICAgIGVsaWYgYSA9PSAzOgogICAgICAgIGFjY3MgPSBbXQogICAgICAgIGYgPSBvcGVuKCd2YXJzLnR4dCcsICdyYicpCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgYWNjcy5hcHBlbmQocGlja2xlLmxvYWQoZikpCiAgICAgICAgICAgIGV4Y2VwdCBFT0ZFcnJvcjoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZi5jbG9zZSgpCiAgICAgICAgaSA9IDAKICAgICAgICBwcmludChmJ3tsZ31baV0gQ2hvb3NlIGFuIGFjY291bnQgdG8gZGVsZXRlXG4nKQogICAgICAgIGZvciBhY2MgaW4gYWNjczoKICAgICAgICAgICAgcHJpbnQoZid7bGd9W3tpfV0ge2FjY1swXX17bn0nKQogICAgICAgICAgICBpICs9IDEKICAgICAgICBpbmRleCA9IGludChpbnB1dChmJ1xue2xnfVsrXSBFbnRlciBhIGNob2ljZToge259JykpCiAgICAgICAgcGhvbmUgPSBzdHIoYWNjc1tpbmRleF1bMF0pCiAgICAgICAgc2Vzc2lvbl9maWxlID0gcGhvbmUgKyAnLnNlc3Npb24nCiAgICAgICAgaWYgb3MubmFtZSA9PSAnbnQnOgogICAgICAgICAgICBvcy5zeXN0ZW0oZidkZWwgc2Vzc2lvbnNcXHtzZXNzaW9uX2ZpbGV9JykKICAgICAgICBlbHNlOgogICAgICAgICAgICBvcy5zeXN0ZW0oZidybSBzZXNzaW9ucy97c2Vzc2lvbl9maWxlfScpCiAgICAgICAgZGVsIGFjY3NbaW5kZXhdCiAgICAgICAgZiA9IG9wZW4oJ3ZhcnMudHh0JywgJ3diJykKICAgICAgICBmb3IgYWNjb3VudCBpbiBhY2NzOgogICAgICAgICAgICBwaWNrbGUuZHVtcChhY2NvdW50LCBmKQogICAgICAgIHByaW50KGYnXG57bGd9WytdIEFjY291bnQgRGVsZXRlZHtufScpCiAgICAgICAgaW5wdXQoZidcblByZXNzIGVudGVyIHRvIGdvdG8gbWFpbiBtZW51Li4uJykKICAgICAgICBmLmNsb3NlKCkKICAgIGVsaWYgYSA9PSA0OgogICAgICAgICMgdGhhbmtzIHRvIGdpdGh1Yi5jb20vdGgzdW5rbjBuIGZvciB0aGUgc25pcHBldCBiZWxvdwogICAgICAgIHByaW50KGYnXG57bGd9W2ldIENoZWNraW5nIGZvciB1cGRhdGVzLi4uJykKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0NyeXB0b25pYW4wMDcvemlsbGEvbWFpbi92ZXJzaW9uLnR4dAogICAgICAgICAgICB2ZXJzaW9uID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQ3J5cHRvbmlhbjAwN3ppbGxhL21haW4vdmVyc2lvbi50eHQnKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcHJpbnQoZid7cn0gWW91IGFyZSBub3QgY29ubmVjdGVkIHRvIHRoZSBpbnRlcm5ldCcpCiAgICAgICAgICAgIHByaW50KGYne3J9IFBsZWFzZSBjb25uZWN0IHRvIHRoZSBpbnRlcm5ldCBhbmQgcmV0cnknKQogICAgICAgICAgICBleGl0KCkKICAgICAgICBpZiBmbG9hdCh2ZXJzaW9uLnRleHQpID4gMS4xOgogICAgICAgICAgICBwcm9tcHQgPSBzdHIoaW5wdXQoZid7bGd9W35dIFVwZGF0ZSBhdmFpbGFibGVbVmVyc2lvbiB7dmVyc2lvbi50ZXh0fV0uIERvd25sb2FkP1t5L25dOiB7cn0nKSkKICAgICAgICAgICAgaWYgcHJvbXB0ID09ICd5JyBvciBwcm9tcHQgPT0gJ3llcycgb3IgcHJvbXB0ID09ICdZJzoKICAgICAgICAgICAgICAgIHByaW50KGYne2xnfVtpXSBEb3dubG9hZGluZyB1cGRhdGVzLi4uJykKICAgICAgICAgICAgICAgIGlmIG9zLm5hbWUgPT0gJ250JzoKICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ2RlbCBhZGQucHknKQogICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgnZGVsIG1hbmFnZXIucHknKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ3JtIGFkZC5weScpCiAgICAgICAgICAgICAgICAgICAgb3Muc3lzdGVtKCdybSBtYW5hZ2VyLnB5JykKICAgICAgICAgICAgICAgICNvcy5zeXN0ZW0oJ2RlbCBzY3JhcGVyLnB5JykKICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgnY3VybCAtbCAtTyBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQ3J5cHRvbmlhbjAwNy96aWxsYS9tYWluL2FkZC5weScpCiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ2N1cmwgLWwgLU8gaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0NyeXB0b25pYW4wMDcvemlsbGEvbWFpbi9tYW5hZ2VyLnB5JykKICAgICAgICAgICAgICAgIHByaW50KGYne2xnfVsqXSBVcGRhdGVkIHRvIHZlcnNpb246IHt2ZXJzaW9uLnRleHR9JykKICAgICAgICAgICAgICAgIGlucHV0KCdQcmVzcyBlbnRlciB0byBleGl0Li4uJykKICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoZid7bGd9WyFdIFVwZGF0ZSBhYm9ydGVkLicpCiAgICAgICAgICAgICAgICBpbnB1dCgnUHJlc3MgZW50ZXIgdG8gZ290byBtYWluIG1lbnUuLi4nKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYne2xnfVtpXSBZb3VyIHppbGxhIGlzIGFscmVhZHkgdXAgdG8gZGF0ZScpCiAgICAgICAgICAgIGlucHV0KCdQcmVzcyBlbnRlciB0byBnb3RvIG1haW4gbWVudS4uLicpCiAgICBlbGlmIGEgPT0gNToKICAgICAgICBjbHIoKQogICAgICAgIGJhbm5lcigpCiAgICAgICAgZXhpdCgpCg=='))